name: Starforge CI

on:
  push:
    branches: [mastery, main, develop]
  pull_request:
    branches: ['**']
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  test:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      # Use npm ci if lockfile exists, otherwise npm install
      - name: Install deps (CI)
        if: ${{ hashFiles('package-lock.json') != '' }}
        run: npm ci
      - name: Install deps (no lockfile)
        if: ${{ hashFiles('package-lock.json') == '' }}
        run: npm install

      - name: Compile
        run: npx hardhat compile

      - name: Run tests
        run: npx hardhat test

  coverage:
    name: Coverage guard
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install deps (CI)
        if: ${{ hashFiles('package-lock.json') != '' }}
        run: npm ci
      - name: Install deps (no lockfile)
        if: ${{ hashFiles('package-lock.json') == '' }}
        run: npm install

      - name: Run solidity-coverage
        run: npx hardhat coverage

      - name: Enforce coverage floors
        run: node scripts/check-coverage.cjs

      - name: Upload coverage artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage/
            coverage.json

  slither:
    name: Static analysis (fail if High in project code)
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install deps (CI)
        if: ${{ hashFiles('package-lock.json') != '' }}
        run: npm ci
      - name: Install deps (no lockfile)
        if: ${{ hashFiles('package-lock.json') == '' }}
        run: npm install

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Slither
        run: |
          python -m pip install --upgrade pip
          pip install slither-analyzer crytic-compile

      # Pre-compile helps crytic-compile avoid toolchain hiccups
      - name: Pre-compile with Hardhat
        run: npx hardhat compile

      - name: Run Slither (filtered â†’ JSON for CI)
        run: |
         set -euo pipefail
         mkdir -p reports
         # Run Slither and capture JSON + stderr, but never fail this step
         slither . --filter-paths "node_modules|contracts/test" --json - > reports/slither.ci.json 2> reports/slither.stderr.txt || true

      # You already committed scripts/slither-fail-high.cjs earlier
      - name: Fail if High severity in project code
        run: node scripts/slither-fail-high.cjs reports/slither.filtered.json

      - name: Upload Slither artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: slither-report
          path: reports/slither.filtered.json
